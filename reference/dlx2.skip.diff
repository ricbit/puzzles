77c77
< @d max_nodes 100000000 /* at most this many nonzero elements in the matrix */
---
> @d max_nodes 10000000 /* at most this many nonzero elements in the matrix */
91c91
< int main (int argc, char *argv[]) {
---
> main (int argc, char *argv[]) {
187d186
< int skip_solutions = 0;
309,310d307
< int total_sharps = 0; /* total number of sharp items */
< int active_sharp_items = 0; /* number of active sharp items */
410d406
<   if (buf[p]=='#') total_sharps++;
433,450d428
< @<Sort item names to place sharps on front@>;
< active_sharp_items = total_sharps;
< if (vbose & show_details) {
<   fprintf(stderr, "Total sharps %d\n", total_sharps);
< }
< 
< @ @<Sort item names to place sharps on front@>=
< int last_nonsharp = 1;
< for (int i = 1; i < last_itm; i++) {
<   if (i > last_nonsharp && o,cl[i].name[0] == '#') {
<     o; /* Since each name is 8 chars, we count it as a single mem */
<     char tmp[8];
<     memcpy(tmp, cl[i].name, 8);
<     memcpy(cl[i].name, cl[last_nonsharp].name, 8);
<     memcpy(cl[last_nonsharp].name, tmp, 8);
<     last_nonsharp++;
<   }
< }
594,595d571
< if (skip_solutions && cur_node > total_sharps) goto backup;
< skip_solutions = 0;
648d623
<   if (c <= total_sharps) active_sharp_items--;
699d673
<   if (c <= total_sharps) active_sharp_items++;
793,795c767
< t=max_nodes * 2;
< int nonsharp_len=max_nodes;
< int nonsharp_best = -1;
---
> t=max_nodes;
803,810c775,776
<   int current_len = (o, nd[k].len);
<   /* Sharp heuristic: always choose an item starting with #,
<      unless there's an item with len 0 or 1 */
<   if (k > total_sharps && current_len > 1) {
<     current_len += max_nodes;
<   }
<   if (current_len<=t) {
<     if (current_len<t) best_itm=k,t=current_len,p=1;
---
>   if (o,nd[k].len<=t) {
>     if (nd[k].len<t) best_itm=k,t=nd[k].len,p=1;
817,819d782
< if (t > max_nodes) {
<   t -= max_nodes;
< }
842d804
<   skip_solutions = 1;
